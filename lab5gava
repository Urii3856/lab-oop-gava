import java.util.Scanner;

// Інтерфейс — описує поведінку
interface ShapeI {
    double getArea();
    double getPerimeter();
    String getName();
    boolean compareArea(ShapeI other);
}

// Батьківський клас (може мати спільні поля)
abstract class Shape implements ShapeI {
    protected String name; // protected -> доступний у нащадках

    public Shape(String name) {
        this.name = name;
    }

    @Override
    public String getName() {
        return name;
    }

    // Реалізація методу порівняння одна для всіх
    @Override
    public boolean compareArea(ShapeI other) {
        return this.getArea() == other.getArea();
    }
}

// Клас Прямокутник
class Rectangle extends Shape {
    private double a;
    private double b;

    private static int count = 0; // статичне поле

    // Ініціалізатор
    {
        System.out.println("Створюється новий прямокутник...");
    }

    public Rectangle(double a, double b) {
        super("Прямокутник");
        this.a = a;
        this.b = b;
        count++;
    }

    // Методи доступу
    public double getA() {
        return a;
    }

    public void setA(double a) {
        this.a = a;
    }

    public double getB() {
        return b;
    }

    public void setB(double b) {
        this.b = b;
    }

    public static int getCount() {
        return count;
    }

    @Override
    public double getArea() {
        return a * b;
    }

    @Override
    public double getPerimeter() {
        return 2 * (a + b);
    }
}

// Клас Прямокутний трикутник
class Triangle extends Shape {
    private double c;
    private double d;

    {
        System.out.println("Створюється новий трикутник...");
    }

    public Triangle(double c, double d) {
        super("Прямокутний трикутник");
        this.c = c;
        this.d = d;
    }

    public double getC() {
        return c;
    }

    public void setC(double c) {
        this.c = c;
    }

    public double getD() {
        return d;
    }

    public void setD(double d) {
        this.d = d;
    }

    @Override
    public double getArea() {
        return 0.5 * c * d;
    }

    @Override
    public double getPerimeter() {
        return c + d + getHypotenuse();
    }

    public double getHypotenuse() {
        return Math.sqrt(c * c + d * d);
    }
}

// Головний клас
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Прямокутник
        System.out.print("Введіть довжину прямокутника (a): ");
        double a = sc.nextDouble();
        System.out.print("Введіть ширину прямокутника (b): ");
        double b = sc.nextDouble();

        // Використання різних типів
        Rectangle rect = new Rectangle(a, b);        // тип КЛАС
        Shape rectAsShape = new Rectangle(a, b);     // тип БАТЬКІВСЬКИЙ КЛАС
        ShapeI rectAsInterface = new Rectangle(a, b); // тип ІНТЕРФЕЙС

        // Трикутник
        System.out.print("Введіть катет c трикутника: ");
        double c = sc.nextDouble();
        System.out.print("Введіть катет d трикутника: ");
        double d = sc.nextDouble();

        Triangle tri = new Triangle(c, d);        // тип КЛАС
        Shape triAsShape = new Triangle(c, d);    // тип БАТЬКІВСЬКИЙ КЛАС
        ShapeI triAsInterface = new Triangle(c, d); // тип ІНТЕРФЕЙС

        // Демонстрація роботи
        System.out.println("\n=== РЕЗУЛЬТАТИ ===");
        System.out.println(rect.getName() + " -> площа: " + rect.getArea() + ", периметр: " + rect.getPerimeter());
        System.out.println(tri.getName() + " -> площа: " + tri.getArea() + ", периметр: " + tri.getPerimeter() +
                ", гіпотенуза: " + tri.getHypotenuse());

        System.out.println("\n=== Використання різних типів ===");
        System.out.println("rectAsShape (батьківський клас): площа = " + rectAsShape.getArea());
        System.out.println("rectAsInterface (інтерфейс): площа = " + rectAsInterface.getArea());

        System.out.println("triAsShape (батьківський клас): площа = " + triAsShape.getArea());
        System.out.println("triAsInterface (інтерфейс): площа = " + triAsInterface.getArea());

        // Використання статичного поля
        System.out.println("\nКількість створених прямокутників: " + Rectangle.getCount());

        // Порівняння
        if (rect.compareArea(tri)) {
            System.out.println("Площі фігур однакові.");
        } else {
            System.out.println("Площі фігур різні.");
        }

        sc.close();
    }
}
